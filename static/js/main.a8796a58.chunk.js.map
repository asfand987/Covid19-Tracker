{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","latest","setLatest","results","setResults","searchCountry","setSearchCountry","useEffect","axios","all","get","then","responseArr","data","catch","err","console","log","countries","map","i","Card","key","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","Body","Title","country","Text","cases","deaths","active","recovered","lastUpdated","Date","parseInt","updated","toString","filterCountry","filter","item","showCountry","CardDeck","getName","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","CardColumns","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a8796a58.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from \"react-bootstrap/CardDeck\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\nimport Form from 'react-bootstrap/Form';\nimport CardColumns  from \"react-bootstrap/CardColumns\";\n\n\nfunction App() {\n  const [latest, setLatest] = useState([]);\n  const [results, setResults] = useState([]);\n  const [searchCountry, setSearchCountry] = useState(\"\");\n\n  useEffect(() => {\n    axios\n    .all([\n      axios.get(\"https://disease.sh/v2/countries/united%20kingdom\"),\n      axios.get(\"https://disease.sh/v2/countries\")\n    ])\n    .then(responseArr => {\n      setLatest(responseArr[0].data);\n      setResults(responseArr[1].data);\n    })\n    .catch(err => {\n      console.log(err);\n    });\n}, []);\n\nconst countries = results.map((data, i) => {\n  return (\n    <Card\n      key = {i}\n      bg=\"light\"\n      text=\"dark\"\n      className=\"text-center\" \n      style = {{margin: \"10px\"}}\n      >\n        <Card.Img variant=\"top\" src={data.countryInfo.flag} />\n        <Card.Body>\n          <Card.Title>{data.country}</Card.Title>\n          <Card.Text>Cases: {data.cases}</Card.Text>\n          <Card.Text>Deaths: {data.deaths}</Card.Text>\n          <Card.Text>Active: {data.active}</Card.Text>\n          <Card.Text>Recovered: {data.recovered}</Card.Text>\n        </Card.Body>\n      </Card>\n  );\n});\n\nconst date = new Date(parseInt(latest.updated));\nconst lastUpdated = date.toString();\n\nconst filterCountry = results.filter(item => {\n  return item.country === searchCountry\n});\n\n\nconst showCountry = filterCountry.map((data, i) => {\n  return (   \n    <CardDeck style = {{margin: \"10px\"}}>\n    <Card bg =\"secondary\" text=\"white\" className=\"text-center\" style = {{margin: \"10px\"}}>\n    <Card.Body> \n    <Card.Title>Cases</Card.Title>\n      <Card.Text>\n        {data.cases}\n      </Card.Text>\n    </Card.Body>\n</Card>\n<Card bg=\"danger\" text=\"white\" className=\"text-center\" style = {{margin: \"10px\"}}>\n  <Card.Body>\n    <Card.Title>Deaths</Card.Title>\n    <Card.Text>\n    {data.deaths}\n    </Card.Text>\n  </Card.Body>\n\n</Card>\n<Card bg=\"warning\" text= \"white\" className=\"text-center\" style = {{margin: \"10px\"}}>\n  <Card.Body>\n    <Card.Title>Active</Card.Title>\n    <Card.Text>\n      {data.active}\n    </Card.Text>\n  </Card.Body>\n\n</Card>\n<Card bg=\"success\" text= \"white\" className=\"text-center\" style = {{margin: \"10px\"}}>\n  <Card.Body>\n    <Card.Title>Recovered</Card.Title>\n    <Card.Text>\n      {data.recovered}\n    </Card.Text>\n  </Card.Body>\n\n</Card>\n</CardDeck>\n  );\n});\n\nconst getName = filterCountry.map((data, i) => {\n  return data.country\n});\n/* Fucntion to return flag of country which has been searched\nconst showFlag = filterCountry.map((data, i) => {\n  return data.countryInfo.flag\n});\n*/\n  return (\n    <div > \n      <h1 className=\"text-center\" style = {{margin: \"20px\"}}>Covid-19 Tracker</h1>\n      <p className=\"text-center\">Made by Asfand Khan</p>\n      <h2 className=\"text-center\" style = {{margin: \"20px\"}}>United Kingdom</h2>\n      <CardDeck style = {{margin: \"10px\"}}>\n      <Card bg =\"secondary\" text=\"white\" className=\"text-center\" style = {{margin: \"10px\"}}>\n      <Card.Body>\n      <Card.Title>Cases</Card.Title>\n        <Card.Text>\n          {latest.cases}\n        </Card.Text>\n      </Card.Body>\n    <Card.Footer>\n      <small>{lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"danger\" text=\"white\" className=\"text-center\" style = {{margin: \"10px\"}}>\n    <Card.Body>\n      <Card.Title>Deaths</Card.Title>\n      <Card.Text>\n      {latest.deaths}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>{lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"warning\" text= \"white\" className=\"text-center\" style = {{margin: \"10px\"}}>\n    <Card.Body>\n      <Card.Title>Active</Card.Title>\n      <Card.Text>\n        {latest.active}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>{lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"success\" text= \"white\" className=\"text-center\" style = {{margin: \"10px\"}}>\n    <Card.Body>\n      <Card.Title>Recovered</Card.Title>\n      <Card.Text>\n        {latest.recovered}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>{lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n</CardDeck>\n<h2 className=\"text-center\" style = {{margin: \"30px\"}}>Search Country</h2>\n<Form style = {{margin: \"20px\"}}>\n  <Form.Group controlId=\"countrySearch\">\n    <Form.Control\n      type=\"text\"\n      placeholder=\"Enter country\"\n      onChange = {e => setSearchCountry(e.target.value)}\n      />\n  </Form.Group>\n  </Form>\n  {/*  To show case country flag when a country is searched\n  <Card.Img variant=\"top\" src={showFlag} margin=\"10px\" height=\"400\"/> */}\n  <h2 className=\"text-center\" margin=\"20px\">{\"Covid-19 Data For: \" + getName}</h2>\n  <Card>{showCountry}</Card>\n  <h2 className=\"text-center\" style = {{margin: \"30px\"}}>List Of All Countries With Covid-19</h2>\n  <CardColumns>{countries}</CardColumns>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}